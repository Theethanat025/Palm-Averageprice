import joblib
import numpy as np
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
from sklearn.metrics import r2_score
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split

# CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
page_bg_img = '''
<style>
body {
    background-color: #f5f5f5;
}
</style>
'''

# ‡πÅ‡∏ó‡∏£‡∏Å CSS ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏≠‡∏õ Streamlit
st.markdown(page_bg_img, unsafe_allow_html=True)

# 1. ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
data = pd.read_csv('palm averageprice 2017_2023.csv')

# ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
month_mapping = {
    "january": 1, "february": 2, "march": 3, "april": 4, 
    "may": 5, "june": 6, "july": 7, "august": 8, 
    "september": 9, "october": 10, "november": 11, "december": 12
}
data['Month'] = data['Month'].map(month_mapping)

X = data[['Year', 'Month']]
y = data['AveragePrice']

# ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å (train) ‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö (test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Random Forest ‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
joblib.dump(model, 'Palm_averageprice_model.pkl')

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏≤‡∏•‡πå‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
def predict_oil_price(features):
    prediction = model.predict([features])[0]  # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤

    uncertainty = 0.05 * prediction  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÉ‡∏ä‡πâ 5% ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢)

    lower_bound = prediction - uncertainty
    upper_bound = prediction + uncertainty

    return prediction, lower_bound, upper_bound

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
def plot_past_future_prices_by_month(prediction, month_number):
    past_data = data[data['Month'] == month_number]
    past_years = past_data['Year']
    past_prices = past_data['AveragePrice']

    future_year = past_data['Year'].max() + 1
    future_price = prediction

    plt.figure(figsize=(10, 6))

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
    plt.plot(past_years, past_prices, label="Past Prices", color="blue", marker="o")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    plt.plot(future_year, future_price, label="Predicted Future Price", color="red", linestyle="--", marker="x")

    # ‡πÄ‡∏™‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    plt.plot([past_years.max(), future_year], [past_prices.iloc[-1], future_price], color="red", linestyle="--", label="Prediction Transition")

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏à‡∏∏‡∏î‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï
    for i in range(len(past_years)):
        plt.text(past_years.iloc[i], past_prices.iloc[i] + 0.1, f'{past_prices.iloc[i]:.2f}', ha='center', color='blue')

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏à‡∏∏‡∏î‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    plt.text(future_year, future_price + 0.1, f'{future_price:.2f}', ha='center', color='red')

    plt.xlabel("Year")
    plt.ylabel("Palm Oil Price (Baht)")
    plt.title(f"Palm Oil Prices for Month {month_number} (Past and Future Prediction)")
    plt.legend()
    st.pyplot(plt)

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ R¬≤
    y_pred = model.predict(X_test)
    r2 = r2_score(y_test, y_pred)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤ R¬≤ ‡πÉ‡∏ï‡πâ‡∏Å‡∏£‡∏≤‡∏ü
    st.markdown(f"<h4>‡∏Ñ‡πà‡∏≤ R¬≤ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠: <b>{r2:.2f}</b></h4>", unsafe_allow_html=True)


# ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
st.markdown("<h2 style='text-align: center;'>‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏õ‡∏≤‡∏•‡πå‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô</h2>", unsafe_allow_html=True)

# ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
month = st.selectbox('üìÖ Month : ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏≤‡∏ö', list(month_mapping.keys()))

if st.button('üí° Predict Oil Price'):
    month_number = month_mapping[month]
    
    # ‡∏î‡∏∂‡∏á‡∏õ‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ö‡∏ß‡∏Å 1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏õ‡∏µ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    last_year = data['Year'].max()
    next_year = last_year + 1

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡∏õ‡∏µ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ, ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
    features = [next_year, month_number]
    prediction, lower_bound, upper_bound = predict_oil_price(features)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    st.markdown(f'<h3 style="color:#66bb6a;">üåø Predicted Palm Oil Price for {next_year}: <b><span style="color:yellow;">{prediction:.2f}</span> Baht</b></h3>', unsafe_allow_html=True)
    st.markdown(f'<h4 style="color:#66bb6a;">üåü Prediction Interval: <b>{lower_bound:.2f} - {upper_bound:.2f} Baht</b></h4>', unsafe_allow_html=True)

    plot_past_future_prices_by_month(prediction, month_number)
